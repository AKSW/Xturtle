/*
 * generated by Xtext
 */
package de.itemis.tooling.xturtle.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

import com.google.inject.Inject;

import de.itemis.tooling.xturtle.services.XturtleGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class XturtleFormatter extends AbstractDeclarativeFormatter {
	
	@Inject
	XturtleGrammarAccess grammarAccess;

	//formatting is extremely problematic as white spaces are significant as separators...
	//use completely separate formatter? try rewriting the grammar? I woudn't like to
	//use my own lexer
	@Override
	protected void configureFormatting(FormattingConfig c) {
// It's usually a good idea to activate the following three statements.
// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(grammarAccess.getSL_COMMENTRule());
//		c.setLinewrap(0, 1, 2).before(getGrammarAccess().getML_COMMENTRule());
//		c.setLinewrap(0, 1, 1).after(getGrammarAccess().getML_COMMENTRule());

//		c.setLinewrap().after(grammarAccess.getStatementAccess().getFullStopKeyword_1());
		c.setIndentationDecrement().after(grammarAccess.getPredicateObjectListAccess().getObjectsAssignment_2());
//		c.setIndentationDecrement().after(grammarAccess.getStatementAccess().getFullStopKeyword_1());
		c.setIndentationIncrement().before(grammarAccess.getPredicateObjectListAccess().getVerbAssignment_0());
		c.setNoSpace().around(grammarAccess.getColonNameAccess().getColonKeyword_0());
		c.setNoSpace().around(grammarAccess.getQNameDefAccess().getColonKeyword_2());
		for (Keyword at : grammarAccess.findKeywords("@")) {
			c.setNoSpace().after(at);
		}
		c.setNoSpace().before(grammarAccess.getPrefixIdAccess().getPrefixKeywordParserRuleCall_0());
		c.setNoSpace().before(grammarAccess.getBaseAccess().getBaseKeywordParserRuleCall_0());
		c.setNoSpace().after(grammarAccess.getQNameRefAccess().getPrefixAssignment_1());
		c.setNoLinewrap().after(grammarAccess.getTriplesAccess().getSemicolonKeyword_3_1());
		c.setNoSpace().between(grammarAccess.getTriplesAccess().getSubjectAssignment_0(), grammarAccess.getTriplesAccess().getPredObjsAssignment_2());

		c.setLinewrap(1).between(grammarAccess.getDirectivesAccess().getDirectiveAssignment_1(), grammarAccess.getDirectivesAccess().getDirectiveAssignment_1());
		c.setLinewrap(2).between(grammarAccess.getDirectiveBlockAccess().getDirectivesAssignment_1(), grammarAccess.getDirectiveBlockAccess().getTriplesAssignment_2_0());
		c.setLinewrap(2).before(grammarAccess.getDirectiveBlockAccess().getDirectiveblockAssignment_2_2());
	}
}
